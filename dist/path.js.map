{"version":3,"file":"path.js","sources":["../src/operators/parse-path.ts","../src/operators/format-path.ts","../src/constants.ts","../src/operators/slope-to-curve.ts","../src/utilities/exception.ts","../src/operators/reverse-path.ts","../src/operators/mix-path.ts","../src/operators/scale-path.ts","../src/main.ts"],"sourcesContent":["export function parsePath(d: any[][] | string) {\n  if (Array.isArray(d)) {\n    return d;\n  }\n\n  const dstrings = d.trim().split(/\\s*(?=[A-Z])/i);\n\n  const allPoints = [];\n  for (let i = 0, ilen = dstrings.length; i < ilen; i++) {\n    const pointArray: any[] = dstrings[i]\n      .trim()\n      // These two replaces are to simplify the split regex\n      .replace(/([^, ])-/g, '$1,-')\n      .replace(/([a-z])(?![,])/gi, '$1 ')\n      .split(/[\\s,]+/)\n      .map((coord, i) => (i === 0 ? coord : +coord));\n\n    // This is done in a separate map so that lastPoint is parsed point\n    const command = pointArray[0];\n    const commandToUpper = (command as string).toUpperCase();\n\n    if (i !== 0 && commandToUpper !== command) {\n      // adjust for relative commands\n      const prev = allPoints[i - 1];\n      pointArray[0] = commandToUpper;\n\n      for (let j = 1, jlen = pointArray.length; j < jlen; j++) {\n        pointArray[j] += prev[prev.length - ((j - 1) % 2 === 0 ? 2 : 1)];\n      }\n    }\n\n    allPoints.push(pointArray);\n  }\n\n  return allPoints;\n}\n","export function formatPath(points: any[], options?: { type?: string }) {\n  const type = (options && options.type) || 'relative';\n\n  return points\n    .map((point, i, allPoints) => {\n      const isAbsolute = i === 0 || type === 'absolute';\n      const prev = allPoints[i - 1];\n\n      const command = isAbsolute ? point[0] : point[0].toLowerCase();\n      const formatter = isAbsolute\n        ? toImpreciseString\n        : (num, j) => toImpreciseString(+num - +prev[prev.length - (j % 2 === 0 ? 2 : 1)]);\n\n      return (\n        command +\n        point\n          .slice(1)\n          .map(formatter)\n          .join(',')\n      );\n    })\n    .join('');\n}\n\nfunction toImpreciseString(num: number) {\n  return num.toFixed(1).replace('.0', '');\n}\n","export const C = 'C',\n  S = 'S',\n  M = 'M',\n  L = 'L';\n","import { C, S } from '../constants';\n\nexport function slopeToCurve(points: any[], prev: any[]) {\n  const len = prev.length;\n  const isPrevSlopeOrCurve = prev[0] === C || prev[0] === S;\n  const x1 = isPrevSlopeOrCurve ? prev[len - 2] * 2 - prev[len - 4] : prev[len - 1];\n  const y1 = isPrevSlopeOrCurve ? prev[len - 1] * 2 - prev[len - 3] : prev[len - 2];\n\n  return [C, x1, y1].concat(points.slice(1));\n}\n","/**\n * Raises an exception.  This is more or less to improve minification\n * @param message \n */\nexport function raiseError(message: string): never {\n  throw new Error(message);\n}\n","import { slopeToCurve } from './slope-to-curve';\nimport { C, S, M, L } from '../constants';\nimport { raiseError } from '../utilities/exception';\n\nexport function reversePath(points: any[][]) {\n  // convert all curves to C\n  const allPoints = points.map((num, i) => {\n    const command = num[0];\n    if (command === M || command === L || command === C) {\n      return num.slice();\n    }\n\n    if (command === S) {\n      return slopeToCurve(num, points[i - 1]);\n    }\n\n    raiseError(\"Can't reverse that\");\n  });\n\n  // Reverse\n  const reversedPoints = [[M].concat(allPoints[allPoints.length - 1].splice(-2, 2))];\n\n  // Don't hit 0: that'll just equal 'M'\n  for (let i = allPoints.length - 1; i >= 1; i--) {\n    // reverse arguments\n    const oldPoint = allPoints[i];\n    const newPoint = [oldPoint[0]];\n\n    for (let j = oldPoint.length - 2; j > 0; j -= 2) {\n      newPoint.push.apply(newPoint, oldPoint.slice(j, j + 2));\n    }\n\n    // grab coordinates from prev\n    newPoint.push.apply(newPoint, allPoints[i - 1].splice(-2, 2));\n\n    reversedPoints.push(newPoint);\n  }\n\n  return reversedPoints;\n}\n","import { slopeToCurve } from './slope-to-curve';\nimport { raiseError } from '../utilities/exception';\nimport { C, S } from '../constants';\n\nexport function mixPaths(aPoints: any[][], bPoints: any[][], x: number) {\n  const alen = aPoints.length;\n  if (alen !== bPoints.length) {\n    raiseError('Paths must be equal length');\n  }\n\n  // Mix the two lines by mixing the individual points together\n  const newPoints = [];\n  for (let i = 0; i < alen; i++) {\n    newPoints.push(mixPoints(aPoints, bPoints, i, x));\n  }\n  return newPoints;\n}\n\nfunction mixPoints(a: any[][], b: any[][], i: number, x: number) {\n  let aPoint = a[i];\n  let bPoint = b[i];\n  const aCommand = aPoint[0];\n  const bCommand = bPoint[0];\n\n  // Check that this combination of commands is mixable\n  if (!isCompatible(aCommand, bCommand)) {\n    raiseError(aCommand + '+' + bCommand + 'is not supported');\n  }\n\n  // convert S -> C where possible\n  if (aCommand === S && bCommand === C) {\n    aPoint = slopeToCurve(aPoint, a[i - 1]);\n  } else if (bCommand === S && aCommand === C) {\n    bPoint = slopeToCurve(bPoint, b[i - 1]);\n  }\n\n  // interpolate all points\n  const points = [aPoint[0]];\n  for (let j = 1; j < aPoint.length; j++) {\n    points.push(aPoint[j] * (1 - x) + bPoint[j] * x);\n  }\n  return points;\n}\n\nfunction isCompatible(a: string, b: string) {\n  return a === b || (a === C && b === S) || (a === S && b === C);\n}\n","import { mixPaths } from './mix-path';\nimport { parsePath } from './parse-path';\nimport { C, S } from '../constants';\nimport { formatPath } from './format-path';\nimport { raiseError } from '../utilities/exception';\n\n// provide approximate epsilon for browser compatibility\nconst EPSILON = 2 ** -52;\n\nexport function scalePath(paths: any[][], options?: { loop?: boolean }) {\n  const loop = options && options.loop;\n  const firstPath = paths[0];\n\n  if (loop) {\n    paths.push(firstPath);\n  }\n\n  const sectionSize = 1 / (paths.length - 1);\n\n  return (x: number) => {\n    if (loop) {\n      x %= 1;\n    }\n\n    // Calculate which two paths to mix, and how much to actually mix them by\n    const index = Math.floor(x / sectionSize);\n    const x2 = (x % sectionSize) / sectionSize;\n    const isExactX = x2 < EPSILON || index + 1 === paths.length;\n\n    // If x lands on a path, just return the path, else mix paths\n    return formatPath(isExactX ? paths[index] : mixPaths(paths[index], paths[index + 1], x2));\n  };\n}\n","import { parsePath } from './operators/parse-path';\nimport { formatPath } from './operators/format-path';\nimport { reversePath } from './operators/reverse-path';\nimport { mixPaths } from './operators/mix-path';\nimport { scalePath } from './operators/scale-path';\nimport { PathInstance, PathStatic, PathSource } from './types';\n\nconst path = function Path(source: PathSource) {\n  if (source instanceof Path) {\n    return source as PathInstance;\n  }\n  if (!(this instanceof Path)) {\n    return new (Path as any)(source);\n  }\n  this.points = parsePath(source as string | any[][]);\n} as PathStatic;\n\npath.mix = function(a, b, x) {\n  if (x == null) {\n    x = 0.5;\n  }\n  return path(mixPaths(parsePath(a), parsePath(b), x));\n};\npath.scale = function(pathStrings: string[], options?: { loop?: boolean }) {\n  return scalePath(pathStrings.map(parsePath), options);\n};\n\nfunction reverse(pathSource: PathSource) {\n  return formatPath(reversePath(path(pathSource).points));\n}\n\npath.reverse = reverse;\n\npath.prototype.reverse = function() {\n  return reverse(this.points);\n};\n\npath.prototype.d = path.prototype.toString = function(options?: { type?: string }) {\n  return formatPath(this.points, options);\n};\n\nexport default path;\n"],"names":[],"mappings":"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"}